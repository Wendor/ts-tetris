{"version":3,"file":"Shape.js","sourceRoot":"","sources":["../src/Shape.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tetramino } from './Tetramino';\nimport { CellType } from './types/CellType';\n\nexport class Shape extends Tetramino {\n  public tick() {\n    this.draw(CellType.empty);\n    if (this.canMove({ x: 0, y: 1})) {\n      this.y += 1;\n    }\n    this.draw(CellType.shape);\n  }\n\n  public canMove(offset: { x: number; y: number }, shape: number[][] | undefined = undefined) {\n    const map = this.grid.getMap();\n    if (!shape) shape = this.shape;\n\n    for (let y in shape) {\n      for (let x in shape[y]) {\n        const yCoord = parseInt(y) + this.y + offset.y;\n        const xCoord = parseInt(x) + this.x + offset.x;\n        if (shape[y][x] == 0) {\n          continue;\n        }\n        if (map[yCoord] == undefined || map[yCoord][xCoord] == undefined) {\n          return false;\n        }\n        if (shape[y][x] && map[yCoord] && map[yCoord][xCoord] == CellType.wall) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  public move(offset: { x: number; y: number}) {\n    if (!this.canMove(offset)) return;\n    this.draw(CellType.empty);\n    this.x += offset.x;\n    this.y += offset.y;\n    this.draw(CellType.shape);\n  }\n\n  public moveDown() {\n    let offset = 0;\n    for (let y = 0; y < this.grid.getMap().length - 1; y++) {\n      if (!this.canMove({ x: 0, y })) {\n        break;\n      }\n      offset = y;\n    }\n    this.move({ x: 0, y: offset });\n  }\n\n  public rotate() {\n    const shape = this.rotatedShape();\n    if (this.canMove({ x: 0, y: 0 }, shape)) {\n      this.draw(CellType.empty);\n      this.shape = shape;\n      this.draw(CellType.shape);\n    }\n  }\n\n  private rotatedShape() {\n    return this.shape[0].map((row, idx) => {\n      return this.shape.map((r) => r[idx]).reverse();\n    });\n  }\n}\n"]}