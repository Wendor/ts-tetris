{"version":3,"file":"Shape.js","sourceRoot":"","sources":["../src/Shape.ts"],"names":[],"mappings":"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","sourcesContent":["import { Grid } from \"Grid\";\nimport { CellType } from \"./types/CellType\";\n\nexport const shapes = [\n  [\n    [1,1],\n    [1,1],\n  ],\n  [\n    [1,1,1,1],\n  ],\n  [\n    [1,1,0],\n    [0,1,1],\n  ],\n  [\n    [1,1,1],\n    [0,0,1],\n  ],\n  [\n    [0,1,0],\n    [1,1,1],\n  ],\n];\n\n\nexport class Shape {\n  public x: number;\n  public y: number;\n  public grid: Grid;\n  public shape: number[][];\n\n  constructor(grid: Grid, shape: number[][] | undefined = undefined) {\n    this.grid = grid;\n\n    if (shape) {\n      this.shape = shape;\n    } else {\n      this.shape = shapes[Math.floor(Math.random() * shapes.length)];\n\n      if (Math.random() > 0.5) {\n        this.shape = this.shape.reverse();\n      }\n\n      const rotateTimes = Math.floor(Math.random() * 4);\n      for (let i = 0; i < rotateTimes; i++) {\n        this.shape = this.rotatedShape();\n      }\n    }\n\n    this.x = Math.floor(grid.cols/2) - Math.floor(this.shape[0].length / 2);\n    this.y = 0;\n  }\n\n  public tick() {\n    this.draw(CellType.empty);\n    if (this.canMove({ x: 0, y: 1})) {\n      this.y += 1;\n    }\n    this.draw(CellType.shape);\n  }\n\n  public draw(type = CellType.shape) {\n    for (let j = 0; j < this.shape.length; j++) {\n      for (let i = 0; i < this.shape[0].length; i++) {\n        if (this.shape[j][i]) {\n          this.grid.addQueue({\n            y: this.y + j,\n            x: this.x + i,\n            type: type,\n          });\n        }\n      }\n    }\n  }\n\n  public canMove(offset: { x: number; y: number }, shape: number[][] | undefined = undefined) {\n    const map = this.grid.getMap();\n    if (!shape) shape = this.shape;\n\n    for (let y in shape) {\n      for (let x in shape[y]) {\n        const yCoord = parseInt(y) + this.y + offset.y;\n        const xCoord = parseInt(x) + this.x + offset.x;\n        if (map[yCoord] == undefined || map[yCoord][xCoord] == undefined) {\n          return false;\n        }\n        if (shape[y][x] && map[yCoord] && map[yCoord][xCoord] == CellType.wall) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  public move(offset: { x: number; y: number}) {\n    if (!this.canMove(offset)) return;\n    this.draw(CellType.empty);\n    this.x += offset.x;\n    this.y += offset.y;\n    this.draw(CellType.shape);\n  }\n\n  public moveDown() {\n    let offset = 0;\n    for (let y = 0; y < this.grid.getMap().length - 1; y++) {\n      if (!this.canMove({ x: 0, y })) {\n        break;\n      }\n      offset = y;\n    }\n    this.move({ x: 0, y: offset });\n  }\n\n  public rotate() {\n    const shape = this.rotatedShape();\n    if (this.canMove({ x: 0, y: 0 }, shape)) {\n      this.draw(CellType.empty);\n      this.shape = shape;\n      this.draw(CellType.shape);\n    }\n  }\n\n  private rotatedShape() {\n    return this.shape[0].map((row, idx) => {\n      return this.shape.map((r) => r[idx]).reverse();\n    });\n  }\n\n  update() {\n\n  }\n}\n"]}