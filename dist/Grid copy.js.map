{"version":3,"file":"Grid copy.js","sourceRoot":"","sources":["../src/Grid copy.ts"],"names":[],"mappings":"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","sourcesContent":["import { CellType } from \"./types/CellType\";\nimport { Point } from \"./types/Point\";\n\nexport class Grid {\n  public cols: number = 10;\n  public rows: number = 20;\n  public grid: HTMLElement;\n  public map: number[][];\n  public queue: Point[] = [];\n  public el = 'grid';\n\n  constructor(el = 'grid', cols = 10, rows = 20) {\n    this.cols = cols;\n    this.rows = rows;\n    this.el = el;\n\n    this.grid = document.getElementById(el) as HTMLElement;\n    this.map = (new Array(this.rows))\n      .fill([])\n      .map(() => (new Array(this.cols)).fill(0));\n\n    this.createDom();\n  }\n\n  private createDom() {\n    for (let i = 0; i < this.rows; i++) {\n      const row = document.createElement('div');\n      row.classList.add('row');\n\n      for (let j = 0; j < this.cols; j++) {\n        const cell = document.createElement('div');\n        cell.classList.value = 'cell type-0';\n        cell.dataset.x = j.toString();\n        cell.dataset.y = i.toString();\n        row.appendChild(cell);\n      }\n\n      this.grid.appendChild(row);\n    }\n  }\n\n  public update() {\n    // remove duplicate coordinates\n    this.queue = this.queue\n      .reverse()\n      .filter((point, index, self) => {\n        return index === self.findIndex((t) => {\n          return t.x == point.x && t.y == point.y;\n        });\n      });\n\n    // draw points on grid\n    while(this.queue.length) {\n      const point = this.queue.shift();\n      if (!point) break;\n\n      const selector = `#${this.el} [data-x=\"${point.x}\"][data-y=\"${point.y}\"]`;\n      const cell = document.querySelector(selector) as HTMLElement;\n      if (!point) break;\n\n      cell.classList.value = 'cell';\n      cell.classList.add(`type-${point.type}`);\n    }\n  }\n\n  public addQueue(point: Point) {\n    this.map[point.y][point.x] = point.type;\n    this.queue.push(point);\n  }\n\n  public getMap() {\n    return this.map;\n  }\n\n  public hideRows() {\n    for (let y in this.map) {\n      const row = this.map[y];\n      const walls = row.filter((c) => c == CellType.wall).length;\n      if (row.length == walls) {\n        this.moveDown(parseInt(y));\n      }\n    }\n  }\n\n  private moveDown(targetY: number) {\n    for (let y = targetY; y > 0; y--) {\n      for (let x = 0; x < this.map[0].length; x++) {\n        const type = this.map[y-1][x] == CellType.shape\n          ? CellType.empty\n          : this.map[y-1][x];\n\n        this.addQueue({ x, y, type });\n      }\n    }\n  }\n}\n"]}