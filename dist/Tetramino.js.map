{"version":3,"file":"Tetramino.js","sourceRoot":"","sources":["../src/Tetramino.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAE5C,MAAM,OAAO,SAAS;IACb,CAAC,CAAS;IACV,CAAC,CAAS;IACV,IAAI,CAAO;IACX,KAAK,CAAa;IAEzB,YAAY,IAAU,EAAE,KAAiB,EAAE,QAAQ,GAAG,KAAK;QACzD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAEX,IAAI,QAAQ,IAAI,QAAQ,EAAE;YACxB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACzE;IACH,CAAC;IAEM,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC7C,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;oBACpB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;wBACjB,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC;wBACb,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC;wBACb,IAAI,EAAE,IAAI;qBACX,CAAC,CAAC;iBACJ;aACF;SACF;IACH,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;CACF","sourcesContent":["import { Grid } from 'Grid';\nimport { CellType } from './types/CellType';\n\nexport class Tetramino {\n  public x: number;\n  public y: number;\n  public grid: Grid;\n  public shape: number[][];\n\n  constructor(grid: Grid, shape: number[][], position = 'top') {\n    this.grid = grid;\n    this.shape = shape;\n\n    this.x = Math.ceil(grid.cols/2) - Math.ceil(this.shape[0].length / 2);\n    this.y = 0;\n\n    if (position == 'middle') {\n      this.y = Math.floor(grid.cols/2) - Math.floor(this.shape[0].length / 2);\n    }\n  }\n\n  public draw(type = CellType.shape) {\n    for (let j = 0; j < this.shape.length; j++) {\n      for (let i = 0; i < this.shape[0].length; i++) {\n        if (this.shape[j][i]) {\n          this.grid.addQueue({\n            y: this.y + j,\n            x: this.x + i,\n            type: type,\n          });\n        }\n      }\n    }\n  }\n\n  public undraw() {\n    this.draw(CellType.empty);\n  }\n}\n"]}