{"version":3,"file":"Grid.js","sourceRoot":"","sources":["../src/Grid.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,IAAK,SAAQ,WAAW;IAC5B,IAAI,GAAW,EAAE,CAAC;IAClB,IAAI,GAAW,EAAE,CAAC;IACjB,MAAM,GAAW,CAAC,CAAA;IACnB,IAAI,CAAc;IAClB,GAAG,CAAa;IAChB,KAAK,GAAY,EAAE,CAAC;IAE3B,YAAY,EAAU,EAAE,IAAI,GAAG,EAAE,EAAE,IAAI,GAAG,EAAE,EAAE,MAAM,GAAG,CAAC;QACtD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAgB,CAAC;QAEvD,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC9B,IAAI,CAAC,EAAE,CAAC;aACR,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAE7C,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAEO,SAAS;QACf,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACzB,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAC5C,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC1C,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAEzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;gBAClC,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC3C,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,aAAa,CAAC;gBACrC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAC9B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAC9B,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACvB;YAED,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SAC5B;IACH,CAAC;IAEM,MAAM;QACX,+BAA+B;QAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK;aACpB,OAAO,EAAE;aACT,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;YAC7B,OAAO,KAAK,KAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE;gBACpC,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEL,sBAAsB;QACtB,OAAM,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACvB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACjC,IAAI,CAAC,KAAK;gBAAE,MAAM;YAElB,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,aAAa,KAAK,CAAC,CAAC,cAAc,KAAK,CAAC,CAAC,IAAI,CAAgB,CAAC;YAClH,IAAI,CAAC,IAAI;gBAAE,MAAM;YAEjB,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,MAAM,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;SAC1C;IACH,CAAC;IAEM,QAAQ,CAAC,KAAY;QAC1B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;QACxC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;CACF","sourcesContent":["import { Point } from './types/Point';\n\nexport class Grid extends EventTarget {\n  public cols: number = 10;\n  public rows: number = 20;\n  private offset: number = 0\n  public grid: HTMLElement;\n  public map: number[][];\n  public queue: Point[] = [];\n\n  constructor(el: string, cols = 10, rows = 20, offset = 0) {\n    super();\n    this.cols = cols;\n    this.rows = rows;\n    this.offset = offset;\n    this.grid = document.getElementById(el) as HTMLElement;\n\n    this.map = (new Array(this.rows))\n      .fill([])\n      .map(() => (new Array(this.cols)).fill(0));\n\n    this.createDom();\n  }\n\n  private createDom() {\n    this.grid.innerHTML = '';\n    for (let i = this.offset; i < this.rows; i++) {\n      const row = document.createElement('div');\n      row.classList.add('row');\n\n      for (let j = 0; j < this.cols; j++) {\n        const cell = document.createElement('div');\n        cell.classList.value = 'cell type-0';\n        cell.dataset.x = j.toString();\n        cell.dataset.y = i.toString();\n        row.appendChild(cell);\n      }\n\n      this.grid.appendChild(row);\n    }\n  }\n\n  public update() {\n    // remove duplicate coordinates\n    this.queue = this.queue\n      .reverse()\n      .filter((point, index, self) => {\n        return index === self.findIndex((t) => {\n          return t.x == point.x && t.y == point.y;\n        });\n      });\n\n    // draw points on grid\n    while(this.queue.length) {\n      const point = this.queue.shift();\n      if (!point) break;\n\n      const cell = document.querySelector(`#${this.grid.id} [data-x=\"${point.x}\"][data-y=\"${point.y}\"]`) as HTMLElement;\n      if (!cell) break;\n\n      cell.classList.value = 'cell';\n      cell.classList.add(`type-${point.type}`);\n    }\n  }\n\n  public addQueue(point: Point) {\n    this.map[point.y][point.x] = point.type;\n    this.queue.push(point);\n  }\n\n  public getMap() {\n    return this.map;\n  }\n}\n"]}