{"version":3,"file":"Game.js","sourceRoot":"","sources":["../src/Game.ts"],"names":[],"mappings":"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","sourcesContent":["import { Shape } from './Shape';\nimport { Grid } from './Grid';\nimport { CellType } from './types/CellType';\nimport { GameInput } from './GameInput';\nimport { SevenBag } from './generators/SevenBag';\n\nexport class Game {\n  private grid = new Grid();\n  private speed = 500;\n  private shape: Shape;\n  private lastTickTime = 0;\n  private resetTickTime = false;\n  public gameOver = false;\n  public tetraminoQueue: number[][][] = [];\n  public generator = new SevenBag();\n\n  constructor() {\n    this.shape = new Shape(this.grid, this.generator.get());\n    this.tetraminoQueue = (new Array(4))\n      .fill([])\n      .map(() => this.generator.get());\n\n    this.initInput();\n    window.requestAnimationFrame((t) => this.update(t));\n  }\n\n  private initInput() {\n    const input = new GameInput(this.grid);\n    input.addEventListener('rotate', () => this.onRotate());\n    input.addEventListener('moveLeft', () => this.onMoveLeft());\n    input.addEventListener('moveRight', () => this.onMoveRight());\n    input.addEventListener('moveDown', () => this.onMoveDown());\n  }\n\n  private onRotate() {\n    if (this.gameOver) return;\n    this.shape.rotate();\n    this.resetTickTime = true;\n  }\n\n  private onMoveLeft() {\n    if (this.gameOver) return;\n    this.shape.move({ x: -1, y: 0});\n  }\n\n  private onMoveRight() {\n    if (this.gameOver) return;\n    this.shape.move({ x: 1, y: 0});\n  }\n\n  private onMoveDown() {\n    if (this.gameOver) return;\n    this.shape.moveDown();\n    this.resetTickTime = true;\n  }\n\n  private newTetramino() {\n    const tetramino = this.tetraminoQueue.shift();\n    if (!tetramino) throw new Error('unknown error');\n\n    if (this.shape) {\n      this.shape.draw(CellType.wall);\n    }\n\n    this.shape = new Shape(this.grid, tetramino);\n    this.tetraminoQueue.push(this.generator.get());\n  }\n\n  private tick() {\n    if (this.gameOver) {\n      return;\n    }\n    if (!this.shape.canMove({ x: 0, y: 1})) {\n      this.newTetramino();\n      if (!this.shape.canMove({ x: 0, y: 0})) {\n        this.gameOver = true;\n      }\n      this.shape.draw();\n    }\n    this.shape.tick();\n    this.grid.hideRows();\n  }\n\n  private update(timestamp: number) {\n    if (this.resetTickTime) {\n      this.lastTickTime = timestamp;\n      this.resetTickTime = false;\n    }\n    if (timestamp - this.lastTickTime > this.speed) {\n      this.lastTickTime = timestamp;\n      this.tick();\n    }\n    this.shape.draw();\n\n    this.grid.update();\n    this.shape.update();\n    window.requestAnimationFrame((t) => this.update(t));\n  }\n}\n\nconst game = new Game();\n"]}